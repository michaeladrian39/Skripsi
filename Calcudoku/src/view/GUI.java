/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import controller.Controller;
import java.awt.BorderLayout;
import java.awt.Canvas;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.NoSuchElementException;
import java.util.Scanner;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPopupMenu;
import org.lwjgl.LWJGLException;
import org.lwjgl.input.Keyboard;
import org.lwjgl.opengl.Display;
import org.lwjgl.opengl.DisplayMode;
import static org.lwjgl.opengl.GL11.GL_BLEND;
import static org.lwjgl.opengl.GL11.GL_COLOR_BUFFER_BIT;
import static org.lwjgl.opengl.GL11.GL_COLOR_MATERIAL;
import static org.lwjgl.opengl.GL11.GL_DEPTH_TEST;
import static org.lwjgl.opengl.GL11.GL_LIGHTING;
import static org.lwjgl.opengl.GL11.GL_MODELVIEW;
import static org.lwjgl.opengl.GL11.GL_ONE_MINUS_SRC_ALPHA;
import static org.lwjgl.opengl.GL11.GL_PROJECTION;
import static org.lwjgl.opengl.GL11.GL_SMOOTH;
import static org.lwjgl.opengl.GL11.GL_SRC_ALPHA;
import static org.lwjgl.opengl.GL11.GL_TEXTURE_2D;
import static org.lwjgl.opengl.GL11.glBlendFunc;
import static org.lwjgl.opengl.GL11.glClear;
import static org.lwjgl.opengl.GL11.glClearColor;
import static org.lwjgl.opengl.GL11.glDisable;
import static org.lwjgl.opengl.GL11.glEnable;
import static org.lwjgl.opengl.GL11.glLineWidth;
import static org.lwjgl.opengl.GL11.glLoadIdentity;
import static org.lwjgl.opengl.GL11.glMatrixMode;
import static org.lwjgl.opengl.GL11.glOrtho;
import static org.lwjgl.opengl.GL11.glShadeModel;
import org.newdawn.slick.SlickException;
import org.newdawn.slick.UnicodeFont;
import org.newdawn.slick.font.effects.ColorEffect;

/**
 *
 * @author apple
 */
public class GUI extends javax.swing.JFrame {

    private File puzzleFile;
    private String puzzleFileName;
    private int size;
    private int[][] cageCells;
    private int numberOfCages;
    private String[] cageObjectives;
    private Controller c;
    public boolean running = false;
    public String fontPath;
    private final String FONT_PATH = "res/Roboto-Regular.ttf";
    private Thread gameThread;
    private final int WINDOW_SIZE = 480;
    private final int GRID_WIDTH = WINDOW_SIZE - 30;
    private final float LINE_WIDTH = 2.0f;
    private final int GRID_OFFSET_X = 15;
    private final int GRID_OFFSET_Y = 15;
    private final int OBJECTIVE_OFFSET_X = 3;
    private final int OBJECTIVE_OFFSET_Y = 1;
    private final int OBJECTIVE_FONT_SIZE = 12;
    private int cell_offset_x;
    private int cell_offset_y;
    private static final int CELL_FONT_SIZE = 25;
    private UnicodeFont objectiveFont;
    private UnicodeFont cellFont;
    
    /**
     * Creates new form GUI
     */
    public GUI()
    {
        initApplication();
        initComponents();
        initGame();
        initGUI();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFileChooser = new javax.swing.JFileChooser();
        jPanel = new javax.swing.JPanel();
        canvas = new java.awt.Canvas();
        jMenuBar = new javax.swing.JMenuBar();
        jMenuFile = new javax.swing.JMenu();
        jMenuItemLoad = new javax.swing.JMenuItem();
        jMenuItemReset = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        jMenuItemExit = new javax.swing.JMenuItem();
        jMenuSolve = new javax.swing.JMenu();
        jMenuItemBacktracking = new javax.swing.JMenuItem();
        jMenuItemHybrid = new javax.swing.JMenuItem();

        jFileChooser.setDialogTitle("Load Puzzle File");
        jFileChooser.setFileFilter(new PuzzleFileFilter());

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout jPanelLayout = new javax.swing.GroupLayout(jPanel);
        jPanel.setLayout(jPanelLayout);
        jPanelLayout.setHorizontalGroup(
            jPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(canvas, javax.swing.GroupLayout.PREFERRED_SIZE, 480, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanelLayout.setVerticalGroup(
            jPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(canvas, javax.swing.GroupLayout.PREFERRED_SIZE, 480, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jMenuFile.setText("File");

        jMenuItemLoad.setText("Load Puzzle File");
        jMenuItemLoad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemLoadActionPerformed(evt);
            }
        });
        jMenuFile.add(jMenuItemLoad);

        jMenuItemReset.setText("Reset Puzzle");
        jMenuItemReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemResetActionPerformed(evt);
            }
        });
        jMenuFile.add(jMenuItemReset);
        jMenuFile.add(jSeparator1);

        jMenuItemExit.setText("Exit");
        jMenuItemExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemExitActionPerformed(evt);
            }
        });
        jMenuFile.add(jMenuItemExit);

        jMenuBar.add(jMenuFile);

        jMenuSolve.setText("Solve");

        jMenuItemBacktracking.setText("Backtracking");
        jMenuItemBacktracking.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemBacktrackingActionPerformed(evt);
            }
        });
        jMenuSolve.add(jMenuItemBacktracking);

        jMenuItemHybrid.setText("Hybrid Genetic");
        jMenuItemHybrid.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemHybridActionPerformed(evt);
            }
        });
        jMenuSolve.add(jMenuItemHybrid);

        jMenuBar.add(jMenuSolve);

        setJMenuBar(jMenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItemLoadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemLoadActionPerformed
        if (jFileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION)
        {
            this.puzzleFile = jFileChooser.getSelectedFile();
            try
            {
                if (puzzleFile.getAbsolutePath().endsWith(".txt"))
                {
                    this.puzzleFileName = puzzleFile.getAbsolutePath();
                    loadPuzzleFile(puzzleFile);
                }
                else
                {
                    JOptionPane.showMessageDialog(null, "Invalid puzzle file.", 
                        "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
            catch (FileNotFoundException fnfe)
            {
                JOptionPane.showMessageDialog(null, "Puzzle file not found.", 
                        "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_jMenuItemLoadActionPerformed

    private void jMenuItemResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemResetActionPerformed
        if (puzzleFile == null || puzzleFileName == null)
        {
            JOptionPane.showMessageDialog(null,  "Puzzle file not loaded.", 
                    "Error", JOptionPane.ERROR_MESSAGE);
            throw new IllegalStateException("Puzzle file not loaded.");
        }
        else
        {
            this.c = new Controller(size, numberOfCages, cageCells, cageObjectives);
        }
    }//GEN-LAST:event_jMenuItemResetActionPerformed

    private void jMenuItemExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemExitActionPerformed
        if (JOptionPane.showConfirmDialog(null,
                "Are you sure you want to exit this application?", "Exit", 
                JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION)
        {
            remove(jPanel);
            System.exit(0);
        }
    }//GEN-LAST:event_jMenuItemExitActionPerformed

    private void jMenuItemBacktrackingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemBacktrackingActionPerformed
        if (puzzleFile == null || puzzleFileName == null)
        {
            JOptionPane.showMessageDialog(null,  "Puzzle file not loaded.", 
                    "Error", JOptionPane.ERROR_MESSAGE);
            throw new IllegalStateException("Puzzle file not loaded.");
        }
        else
        {
            c.solveBacktracking();
        }
    }//GEN-LAST:event_jMenuItemBacktrackingActionPerformed

    private void jMenuItemHybridActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemHybridActionPerformed
        if (puzzleFile == null || puzzleFileName == null)
        {
            JOptionPane.showMessageDialog(null,  "Puzzle file not loaded.", 
                    "Error", JOptionPane.ERROR_MESSAGE);
            throw new IllegalStateException("Puzzle file not loaded.");
        }
        else
        {
            c.solveHybridGenetic();
        }
    }//GEN-LAST:event_jMenuItemHybridActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUI().setVisible(true);
            }
        });
    }
    
    private void initApplication()
    {
        this.setTitle("Calcudoku");
        this.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        JPopupMenu.setDefaultLightWeightPopupEnabled(false); 
        addListeners();
    }
    
    private void addListeners()
    {
        this.addWindowListener(new WindowAdapter()
        {
            
            @Override
            public void windowClosing(WindowEvent e)
            {
                if (JOptionPane.showConfirmDialog(null, 
                        "Are you sure you want to exit the application?", 
                        "Exit", JOptionPane.YES_NO_OPTION) 
                        == JOptionPane.YES_OPTION);
                {
                    remove(canvas);
                    remove(jPanel);
                }
            }
            
            @Override
            public void windowClosed(WindowEvent e)
            {
                System.exit(0);
            }    
            
        });
    }
    
    public void startLWJGL()
    {
        gameThread = new Thread()
        {
            
            @Override
            public void run()
            {
                startGame();
            }
            
        };
        gameThread.start();
    }

    private void stopLWJGL()
    {
        running = false;
        try
        {
            gameThread.join();
        }
        catch (InterruptedException ie)
        {
            System.out.println(ie);
        }
    }
    
    private void startGame()
    {
        running = true;
        //gameLoop();
        //destroy();
    }
    
    private void initGame()
    {
        setLayout(new BorderLayout());
        this.fontPath = FONT_PATH;
        try
        {
            canvas = new Canvas()
            {

                @Override
                public final void addNotify()
                {
                    super.addNotify();
                    startLWJGL();
                }

                @Override
                public final void removeNotify()
                {
                    stopLWJGL();
                    super.removeNotify();
                }
                
            };
            canvas.setSize(getWidth(), getHeight());
            add(canvas);
            canvas.setFocusable(true);
            canvas.requestFocus();
            canvas.setIgnoreRepaint(true);
            setVisible(true);
        }
        catch (Exception e)
        {
            System.err.println(e);
            throw new RuntimeException("Unable to create display");
        }
    }
    
    private void loadPuzzleFile(File puzzleFile) throws FileNotFoundException
    {
        try
        {
            try (Scanner sc = new Scanner(puzzleFile))
            {
                this.size = sc.nextInt();
                this.cageCells = new int[size][size];
                this.numberOfCages = sc.nextInt();
                this.cageObjectives = new String[numberOfCages];
                for (int i = 0; i < size; i++)
                {
                    for (int j = 0; j < size; j++)
                    {
                        this.cageCells[i][j] = sc.nextInt();
                    }
                }
                for (int i = 0; i < numberOfCages; i++)
                {
                    this.cageObjectives[i] = sc.next();
                }
                if (sc.hasNext())
                {
                    JOptionPane.showMessageDialog(null, "Invalid puzzle file.",
                            "Error", JOptionPane.ERROR_MESSAGE);
                    throw new IllegalStateException("Invalid puzzle file.");
                }
                sc.close();
            }
            this.c = new Controller(size, numberOfCages, cageCells, 
                    cageObjectives);
        }
        catch (NoSuchElementException nsee)
        {
            JOptionPane.showMessageDialog(null, "Invalid puzzle file.", 
                    "Error", JOptionPane.ERROR_MESSAGE);
            throw new IllegalStateException("Invalid puzzle file.");
        }
    }
    
    public String getFontPath()
    {
        return fontPath;
    }
    
    private void initGUI()
    {
        try
        {
            Display.setDisplayMode(new DisplayMode(WINDOW_SIZE, WINDOW_SIZE));
            Display.setTitle("Calcudoku");
            Display.setParent(canvas);
            Display.create();
        }
        catch (LWJGLException e)
        {
            JOptionPane.showMessageDialog(null, 
                    "Display was not initialized correctly.", "Error", 
                    JOptionPane.ERROR_MESSAGE);
            return;
        }
        try
        {
            Keyboard.create();
        }
        catch (LWJGLException e)
        {
            JOptionPane.showMessageDialog(null, 
                    "Keyboard could not be created.", "Error", 
                    JOptionPane.ERROR_MESSAGE);
            return;
        }
        glEnable(GL_TEXTURE_2D);
        glShadeModel(GL_SMOOTH);
        glDisable(GL_DEPTH_TEST);
        glDisable(GL_LIGHTING);
        glEnable(GL_BLEND);
        glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
        glMatrixMode(GL_PROJECTION);
        glLoadIdentity();
        glOrtho(0, WINDOW_SIZE, WINDOW_SIZE, 0, 1, -1);
        glMatrixMode(GL_MODELVIEW);
        glEnable(GL_COLOR_MATERIAL);
        glClearColor(1.0f, 1.0f, 1.0f, 0.0f);
        glClear(GL_COLOR_BUFFER_BIT);
        glLineWidth(LINE_WIDTH);
        try
        {
            objectiveFont = new UnicodeFont(fontPath, OBJECTIVE_FONT_SIZE, 
                    false, false);
            objectiveFont.addAsciiGlyphs();
            objectiveFont.getEffects().add(new ColorEffect());
            objectiveFont.loadGlyphs();
            cellFont = new UnicodeFont(fontPath, CELL_FONT_SIZE, false, false);
            cellFont.addAsciiGlyphs();
            cellFont.getEffects().add(new ColorEffect());
            cellFont.loadGlyphs();
        }
        catch (SlickException e)
        {
            JOptionPane.showMessageDialog(null, "Failed to create font.", 
                    "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private java.awt.Canvas canvas;
    private javax.swing.JFileChooser jFileChooser;
    private javax.swing.JMenuBar jMenuBar;
    private javax.swing.JMenu jMenuFile;
    private javax.swing.JMenuItem jMenuItemBacktracking;
    private javax.swing.JMenuItem jMenuItemExit;
    private javax.swing.JMenuItem jMenuItemHybrid;
    private javax.swing.JMenuItem jMenuItemLoad;
    private javax.swing.JMenuItem jMenuItemReset;
    private javax.swing.JMenu jMenuSolve;
    private javax.swing.JPanel jPanel;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    // End of variables declaration//GEN-END:variables
}
